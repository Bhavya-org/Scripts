import java.net.URLEncoder

// Function to make REST API GET requests
def getRequest(String url) {
    return get(url)
        .header('Content-Type', 'application/json')
        .asObject(Map)
}

// Function to make REST API POST requests
def postRequest(String url, Map body) {
    return post(url)
        .header('Content-Type', 'application/json')
        .body(body)
        .asObject(Map)
}

// Step 1: Define the JQL query
def projectKey = 'KBT'
def jqlQuery = URLEncoder.encode("project = ${projectKey} AND fixVersion IS NOT EMPTY AND component = Test AND issuetype = Story", 'UTF-8')
def searchUrl = "/rest/api/3/search?jql=${jqlQuery}"

// Step 2: Search for issues matching the JQL query
def searchResult = getRequest(searchUrl)

if (searchResult.status == 200 && searchResult.body.containsKey('issues')) {
    def issues = searchResult.body.issues

    // Define the comment text to be added
    def commentTextTemplate = """
    Hi [~accountid:{reporter}] [~accountid:{assignee}],

    Please update story points estimate as this story is already DoR ready.
    """

    def commentText = "Please update story points estimate as this story is already DoR ready."

    issues.each { issue ->
        def issueKey = issue.key
        def reporter = issue.fields.reporter?.accountId
        def assignee = issue.fields.assignee?.accountId
        
        def commentTextInstance = commentTextTemplate
            .replace("{reporter}", reporter ?: "")
            .replace("{assignee}", assignee ?: "")

        // Step 3: Get existing comments for the issue
        def commentsResult = getRequest('/rest/api/2/issue/' + issueKey + '/comment')

        if (commentsResult.status == 200 && commentsResult.body.containsKey('comments')) {
            def comments = commentsResult.body.comments

            // Step 4: Check for duplicate comments
            def commentAlreadyExists = comments.any { comment ->
                comment.body.contains(commentText.trim())
            }

            // Step 5: Add the new comment only if it doesn't already exist
            if (!commentAlreadyExists) {
                def addCommentResult = postRequest('/rest/api/2/issue/' + issueKey + '/comment', ["body": commentTextInstance.trim()])
                if (addCommentResult.status == 201) {
                    println("Comment added to issue ${issueKey}.")
                } else {
                    println("Failed to add comment to issue ${issueKey}.")
                }
            } else {
                println("Duplicate comment found for issue ${issueKey}, not adding a new one.")
            }
        } else {
            println("Failed to retrieve comments for issue ${issueKey}.")
        }
    }
} else {
    println("Failed to search for issues. Status: ${searchResult.status}")
}
