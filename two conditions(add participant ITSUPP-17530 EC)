def issueKey = issue.key
def requestType = issue.fields.customfield_10010?.requestType?.name?.toString()
def accountId = "63060b97189e0a3a4ff283dc"
def changeType = issue.fields.customfield_10005?.value

def newRequestParticipants = [
    [
        "accountId": accountId
    ]
]

def updateRequestParticipants = { ->
    // Update the request participants field with the correct structure
    def updateResult = put('/rest/api/2/issue/' + issueKey)
            .header('Content-Type', 'application/json')
            .body([
                    fields: [
                            customfield_10127: newRequestParticipants // Use the correct custom field ID
                    ]
            ])
            .asString()

    return updateResult.status == 204
}

def sendNotification = { ->
    // Send a notification to the specified user
    def resp = post("/rest/api/2/issue/${issueKey}/notify")
            .header("Content-Type", "application/json")
            .body([
                subject: "Assigned issue - ${issueKey}",
                textBody: "Body",
                htmlBody: "test",
                to: [
                    users: newRequestParticipants
                ]
            ])
            .asString()

    return resp.status == 204
}

def handleRequest = { ->
    if (updateRequestParticipants()) {
        if (sendNotification()) {
            return "Request participants updated and notification sent successfully."
        } else {
            return "Request participants updated, but failed to send notification."
        }
    } else {
        return "Failed to update request participants."
    }
}

if (requestType == 'Fix an account problem') {
    return handleRequest()
} else if (['IT help', 'Get IT help'].contains(requestType) && changeType == 'Normal') {
    return handleRequest()
} else {
    return "Request type is not 'Fix an account problem', 'IT help', or 'Get IT help'."
}
