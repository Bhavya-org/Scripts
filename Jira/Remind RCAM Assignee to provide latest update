import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.time.temporal.ChronoUnit

def jqlQuery = 'project = JP AND labels in (APPF-Q42023, APPF-Q12024) AND status NOT IN ("In Progress", "Done") ORDER BY created DESC'

// Step 1: Search for issues matching the JQL query
def searchUrl = "/rest/api/3/search?jql=${URLEncoder.encode(jqlQuery, 'UTF-8')}"
def searchResult = get(searchUrl)
    .header('Content-Type', 'application/json')
    .asObject(Map)

if (searchResult.status == 200 && searchResult.body.containsKey('issues')) {
    def issues = searchResult.body.issues

    issues.each { issue ->
        def issueKey = issue.key
        def reporter = issue.fields.reporter.displayName
        def commentText1 = """
        ======= AUTOMATED COMMENT ========

        ${reporter}, please confirm if this request is for an OPEN ACCESS, or DIRECT ACCESS member!
        For DA, please specify if the request is for a closed membership, in KYC or abandoned before KYC.

        Thank you!
        """

        // Step 2: Get existing comments for the issue
        def commentsResult = get('/rest/api/2/issue/' + issueKey + '/comment')
            .header('Content-Type', 'application/json')
            .asObject(Map)

        // Step 3: Check for duplicate comments
        def comments = commentsResult.body.comments
        def commentAlreadyExists = comments.any { comment ->
            comment.body.contains(commentText1.trim())
        }

        // Calculate the difference in days between the last comment and now
        if (!comments.isEmpty()) {
            def lastCommentDateStr = comments.last().created
            def formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSSX")
            def lastCommentDate = LocalDateTime.parse(lastCommentDateStr, formatter)
            def now = LocalDateTime.now()
            def daysDifference = ChronoUnit.DAYS.between(lastCommentDate, now)

            if (daysDifference > 7) {
                if (!commentAlreadyExists) {
                    // Step 4: Add the new comment only if it doesn't already exist
                    def addCommentResult = post('/rest/api/2/issue/' + issueKey + '/comment')
                        .header('Content-Type', 'application/json')
                        .body(["body": commentText1.trim()])
                        .asObject(Map)

                    println("Comment added. Response: ${addCommentResult}")
                } else {
                    println("Duplicate comment found, not adding a new one.")
                }
            } else {
                println("Last comment was less than 7 days ago, skipping automated comments.")
            }
        } else {
            println("No comments found, skipping automated comments.")
        }
    }
} else {
    println("No issues found matching the JQL query or there was an error in the search request.")
}
