import groovy.json.JsonSlurper

def projectKey = 'U11'
def jqlQuery = URLEncoder.encode("project = ${projectKey} AND issuetype = Task AND status not in (Closed, 'In Progress', 'WIP') AND ((priority = 'Medium' AND created <= -1d) OR (priority = High AND created <= -21d) OR (priority = Highest AND created <= -35d) OR (priority = Low AND created <= -60d))", 'UTF-8')
def searchUrl = "/rest/api/3/search?jql=${jqlQuery}"

def searchResult = get(searchUrl).asObject(Map)

if (searchResult.status == 200 && searchResult.body.containsKey('issues')) {
    def issues = searchResult.body.issues
    def selectListFieldId = 'customfield_10075' // Replace with your actual field ID

    issues.each { issue ->
        def issueKey = issue.key

        // Update issue field
        def updateResult = put("/rest/api/2/issue/${issueKey}")
            .header('Content-Type', 'application/json')
            .body([
                fields: [
                    (selectListFieldId): [value: "4"]
                ]
            ])
            .asString()
        
        if (updateResult.status == 204) { // Check if the update was successful
            // Notify users
            def notifyResult = post("/rest/api/2/issue/${issueKey}/notify")
                .header("Content-Type", "application/json")
                .body([
                    subject: "Issue ${issueKey} has just been updated",
                    htmlBody: "Defect ${issueKey} is out of SLA now!",
                    to: [
                        users: [
                            [
                                accountId: '63060b97189e0a3a4ff283dc' // Replace with the actual account ID
                            ]
                        ]
                    ]
                ])
                .asString()
            
            // Send notification to webhook
            def webhookUrl = 'https://hooks.slack.com/services/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'
            def msg = [
                text: """Defect ${issueKey} <https://tideaccount.atlassian.net/browse/${issueKey}|${issue.fields.summary}> is now out of SLA.
                Please consider it!
                """
            ]
            
            def webhookResponse = post(webhookUrl)
                .header('Content-Type', 'application/json')
                .body(msg)
                .asString()
            
            // Handle webhook response as needed
        } else {
            // Handle update failure if needed
        }
    }
} else {
    // Issue does not match the JQL query
    // Optionally, log a message or perform other actions here
}
