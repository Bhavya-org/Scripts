def issueKey = 'JP-105'
def requestParticipants = [
    ["accountId": "6305b88c958ffd78c6e0e59e"],
    ["accountId": "630a0d15ec02b5f28b63a024"]
]

def updateRequestParticipants(issueKey, participants) {
    return put('/rest/api/2/issue/' + issueKey)
            .header('Content-Type', 'application/json')
            .body([fields: [customfield_10127: participants]])
            .asString()
}

def addWatcher(issueKey, watcherAccountId) {
    return post('/rest/api/3/issue/' + issueKey + '/watchers')
            .header('Content-Type', 'application/json')
            .body("\"${watcherAccountId}\"")
            .asString()
}

def result = get('/rest/api/2/issue/' + issueKey)
        .header('Content-Type', 'application/json')
        .asObject(Map)

if (result.status == 200) {
    def fields = result.body.fields
    def requestType = fields.customfield_10010?.requestType?.name
    def changeType = fields.customfield_10005?.value

    if (['IT Support', 'Get IT help', 'Fix an account problem'].contains(requestType) &&
            ['Normal', 'Strong'].contains(changeType)) {
        def watcherAccountId = '6305b88c958ffd78c6e0e59e'
        addWatcher(issueKey, watcherAccountId)
        def updateResult = updateRequestParticipants(issueKey, requestParticipants)
        if (updateResult.status == 204) return "Watchers added and request participants updated successfully."
    } else if (['Onboard new employees', 'Get a guest wifi account'].contains(requestType)) {
        def updateResult = updateRequestParticipants(issueKey, requestParticipants)
        if (updateResult.status == 204) return "Request participants updated successfully."
    }
}

return "Failed to find issue or update request participants: Status: ${result.status} ${result.body}"
